{
  "name": "pty.js",
  "description": "Pseudo terminals for node.",
  "author": {
    "name": "Christopher Jeffrey"
  },
  "version": "0.2.3",
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/chjj/pty.js.git"
  },
  "homepage": "https://github.com/chjj/pty.js",
  "bugs": {
    "url": "https://github.com/chjj/pty.js/issues"
  },
  "keywords": [
    "pty",
    "tty",
    "terminal"
  ],
  "scripts": {
    "test": "NODE_ENV=test mocha -R spec",
    "install": "node-gyp rebuild"
  },
  "tags": [
    "pty",
    "tty",
    "terminal"
  ],
  "devDependencies": {
    "mocha": "~1.7.1"
  },
  "gypfile": true,
  "readme": "# pty.js\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudo\nterminal file descriptors. It returns a terminal object which allows reads\nand writes.\n\nThis is useful for:\n\n- Writing a terminal emulator.\n- Getting certain programs to *think* you're a terminal. This is useful if\n  you need a program to send you control sequences.\n\n## Example Usage\n\n``` js\nvar pty = require('pty.js');\n\nvar term = pty.spawn('bash', [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nterm.on('data', function(data) {\n  console.log(data);\n});\n\nterm.write('ls\\r');\nterm.resize(100, 40);\nterm.write('ls /\\r');\n\nconsole.log(term.process);\n```\n\n## Todo\n\n- Add tcsetattr(3), tcgetattr(3).\n- Add a way of determining the current foreground job for platforms other\n  than Linux and OSX/Darwin.\n\n## License\n\nCopyright (c) 2012, Christopher Jeffrey (MIT License).\n",
  "readmeFilename": "README.md",
  "_id": "pty.js@0.2.3",
  "_from": "pty.js@0.2.3"
}
